<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation decision
     *
     * Submit some information to perform a decision on
     *
     * @param \SplFileObject $credit_file TUNA Customer Credit File (required)
     * @param string $first_name  (required)
     * @param string $last_name  (required)
     * @param string $city  (required)
     * @param string $region  (required)
     * @param string $zip  (required)
     * @param string $dob  (required)
     * @param string $ssn  (required)
     * @param string $address  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function decision($credit_file, $first_name, $last_name, $city, $region, $zip, $dob, $ssn, $address)
    {
        list($response) = $this->decisionWithHttpInfo($credit_file, $first_name, $last_name, $city, $region, $zip, $dob, $ssn, $address);
        return $response;
    }

    /**
     * Operation decisionWithHttpInfo
     *
     * Submit some information to perform a decision on
     *
     * @param \SplFileObject $credit_file TUNA Customer Credit File (required)
     * @param string $first_name  (required)
     * @param string $last_name  (required)
     * @param string $city  (required)
     * @param string $region  (required)
     * @param string $zip  (required)
     * @param string $dob  (required)
     * @param string $ssn  (required)
     * @param string $address  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function decisionWithHttpInfo($credit_file, $first_name, $last_name, $city, $region, $zip, $dob, $ssn, $address)
    {
        // verify the required parameter 'credit_file' is set
        if ($credit_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credit_file when calling decision');
        }
        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling decision');
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $last_name when calling decision');
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling decision');
        }
        // verify the required parameter 'region' is set
        if ($region === null) {
            throw new \InvalidArgumentException('Missing the required parameter $region when calling decision');
        }
        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip when calling decision');
        }
        // verify the required parameter 'dob' is set
        if ($dob === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dob when calling decision');
        }
        // verify the required parameter 'ssn' is set
        if ($ssn === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ssn when calling decision');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling decision');
        }
        // parse inputs
        $resourcePath = "/decision";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($credit_file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['credit_file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($credit_file));
            } else {
                $formParams['credit_file'] = '@' . $this->apiClient->getSerializer()->toFormValue($credit_file);
            }
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($region !== null) {
            $formParams['region'] = $this->apiClient->getSerializer()->toFormValue($region);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($dob !== null) {
            $formParams['dob'] = $this->apiClient->getSerializer()->toFormValue($dob);
        }
        // form params
        if ($ssn !== null) {
            $formParams['ssn'] = $this->apiClient->getSerializer()->toFormValue($ssn);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/decision'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
