<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FuturePay\SDK\CreditDecisioning\Api;

use \FuturePay\SDK\CreditDecisioning\ApiClient;
use \FuturePay\SDK\CreditDecisioning\ApiException;
use \FuturePay\SDK\CreditDecisioning\Configuration;
use \FuturePay\SDK\CreditDecisioning\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \FuturePay\SDK\CreditDecisioning\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \FuturePay\SDK\CreditDecisioning\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\FuturePay\SDK\CreditDecisioning\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \FuturePay\SDK\CreditDecisioning\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \FuturePay\SDK\CreditDecisioning\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\FuturePay\SDK\CreditDecisioning\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation decision
     *
     * Submit some information to perform a decision on
     *
     * @param \FuturePay\SDK\CreditDecisioning\Model\Data $data User information (required)
     * @throws \FuturePay\SDK\CreditDecisioning\ApiException on non-2xx response
     * @return \FuturePay\SDK\CreditDecisioning\Model\InlineResponse200
     */
    public function decision($data)
    {
        list($response) = $this->decisionWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation decisionWithHttpInfo
     *
     * Submit some information to perform a decision on
     *
     * @param \FuturePay\SDK\CreditDecisioning\Model\Data $data User information (required)
     * @throws \FuturePay\SDK\CreditDecisioning\ApiException on non-2xx response
     * @return array of \FuturePay\SDK\CreditDecisioning\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function decisionWithHttpInfo($data)
    {
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling decision');
        }
        // parse inputs
        $resourcePath = "/v1/decision";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\FuturePay\SDK\CreditDecisioning\Model\InlineResponse200',
                '/v1/decision'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\FuturePay\SDK\CreditDecisioning\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\FuturePay\SDK\CreditDecisioning\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
