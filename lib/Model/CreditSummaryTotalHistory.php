<?php
/**
 * CreditSummaryTotalHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FuturePay\SDK\CreditDecisioning\Model;

use \ArrayAccess;

/**
 * CreditSummaryTotalHistory Class Doc Comment
 *
 * @category    Class
 * @package     FuturePay\SDK\CreditDecisioning
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreditSummaryTotalHistory implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'credit_summary_totalHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'publicRecordCount' => 'int',
        'collectionCount' => 'int',
        'totalTradeCount' => 'int',
        'negativeTradeCount' => 'int',
        'historicalNegativeTradeCount' => 'int',
        'historicalNegativeOccurrencesCount' => 'int',
        'revolvingTradeCount' => 'int',
        'installmentTradeCount' => 'int',
        'mortgageTradeCount' => 'int',
        'openTradeCount' => 'int',
        'unspecifiedTradeCount' => 'int',
        'totalInquiryCount' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'publicRecordCount' => 'publicRecordCount',
        'collectionCount' => 'collectionCount',
        'totalTradeCount' => 'totalTradeCount',
        'negativeTradeCount' => 'negativeTradeCount',
        'historicalNegativeTradeCount' => 'historicalNegativeTradeCount',
        'historicalNegativeOccurrencesCount' => 'historicalNegativeOccurrencesCount',
        'revolvingTradeCount' => 'revolvingTradeCount',
        'installmentTradeCount' => 'installmentTradeCount',
        'mortgageTradeCount' => 'mortgageTradeCount',
        'openTradeCount' => 'openTradeCount',
        'unspecifiedTradeCount' => 'unspecifiedTradeCount',
        'totalInquiryCount' => 'totalInquiryCount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'publicRecordCount' => 'setPublicRecordCount',
        'collectionCount' => 'setCollectionCount',
        'totalTradeCount' => 'setTotalTradeCount',
        'negativeTradeCount' => 'setNegativeTradeCount',
        'historicalNegativeTradeCount' => 'setHistoricalNegativeTradeCount',
        'historicalNegativeOccurrencesCount' => 'setHistoricalNegativeOccurrencesCount',
        'revolvingTradeCount' => 'setRevolvingTradeCount',
        'installmentTradeCount' => 'setInstallmentTradeCount',
        'mortgageTradeCount' => 'setMortgageTradeCount',
        'openTradeCount' => 'setOpenTradeCount',
        'unspecifiedTradeCount' => 'setUnspecifiedTradeCount',
        'totalInquiryCount' => 'setTotalInquiryCount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'publicRecordCount' => 'getPublicRecordCount',
        'collectionCount' => 'getCollectionCount',
        'totalTradeCount' => 'getTotalTradeCount',
        'negativeTradeCount' => 'getNegativeTradeCount',
        'historicalNegativeTradeCount' => 'getHistoricalNegativeTradeCount',
        'historicalNegativeOccurrencesCount' => 'getHistoricalNegativeOccurrencesCount',
        'revolvingTradeCount' => 'getRevolvingTradeCount',
        'installmentTradeCount' => 'getInstallmentTradeCount',
        'mortgageTradeCount' => 'getMortgageTradeCount',
        'openTradeCount' => 'getOpenTradeCount',
        'unspecifiedTradeCount' => 'getUnspecifiedTradeCount',
        'totalInquiryCount' => 'getTotalInquiryCount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['publicRecordCount'] = isset($data['publicRecordCount']) ? $data['publicRecordCount'] : null;
        $this->container['collectionCount'] = isset($data['collectionCount']) ? $data['collectionCount'] : null;
        $this->container['totalTradeCount'] = isset($data['totalTradeCount']) ? $data['totalTradeCount'] : null;
        $this->container['negativeTradeCount'] = isset($data['negativeTradeCount']) ? $data['negativeTradeCount'] : null;
        $this->container['historicalNegativeTradeCount'] = isset($data['historicalNegativeTradeCount']) ? $data['historicalNegativeTradeCount'] : null;
        $this->container['historicalNegativeOccurrencesCount'] = isset($data['historicalNegativeOccurrencesCount']) ? $data['historicalNegativeOccurrencesCount'] : null;
        $this->container['revolvingTradeCount'] = isset($data['revolvingTradeCount']) ? $data['revolvingTradeCount'] : null;
        $this->container['installmentTradeCount'] = isset($data['installmentTradeCount']) ? $data['installmentTradeCount'] : null;
        $this->container['mortgageTradeCount'] = isset($data['mortgageTradeCount']) ? $data['mortgageTradeCount'] : null;
        $this->container['openTradeCount'] = isset($data['openTradeCount']) ? $data['openTradeCount'] : null;
        $this->container['unspecifiedTradeCount'] = isset($data['unspecifiedTradeCount']) ? $data['unspecifiedTradeCount'] : null;
        $this->container['totalInquiryCount'] = isset($data['totalInquiryCount']) ? $data['totalInquiryCount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets publicRecordCount
     * @return int
     */
    public function getPublicRecordCount()
    {
        return $this->container['publicRecordCount'];
    }

    /**
     * Sets publicRecordCount
     * @param int $publicRecordCount
     * @return $this
     */
    public function setPublicRecordCount($publicRecordCount)
    {
        $this->container['publicRecordCount'] = $publicRecordCount;

        return $this;
    }

    /**
     * Gets collectionCount
     * @return int
     */
    public function getCollectionCount()
    {
        return $this->container['collectionCount'];
    }

    /**
     * Sets collectionCount
     * @param int $collectionCount
     * @return $this
     */
    public function setCollectionCount($collectionCount)
    {
        $this->container['collectionCount'] = $collectionCount;

        return $this;
    }

    /**
     * Gets totalTradeCount
     * @return int
     */
    public function getTotalTradeCount()
    {
        return $this->container['totalTradeCount'];
    }

    /**
     * Sets totalTradeCount
     * @param int $totalTradeCount
     * @return $this
     */
    public function setTotalTradeCount($totalTradeCount)
    {
        $this->container['totalTradeCount'] = $totalTradeCount;

        return $this;
    }

    /**
     * Gets negativeTradeCount
     * @return int
     */
    public function getNegativeTradeCount()
    {
        return $this->container['negativeTradeCount'];
    }

    /**
     * Sets negativeTradeCount
     * @param int $negativeTradeCount
     * @return $this
     */
    public function setNegativeTradeCount($negativeTradeCount)
    {
        $this->container['negativeTradeCount'] = $negativeTradeCount;

        return $this;
    }

    /**
     * Gets historicalNegativeTradeCount
     * @return int
     */
    public function getHistoricalNegativeTradeCount()
    {
        return $this->container['historicalNegativeTradeCount'];
    }

    /**
     * Sets historicalNegativeTradeCount
     * @param int $historicalNegativeTradeCount
     * @return $this
     */
    public function setHistoricalNegativeTradeCount($historicalNegativeTradeCount)
    {
        $this->container['historicalNegativeTradeCount'] = $historicalNegativeTradeCount;

        return $this;
    }

    /**
     * Gets historicalNegativeOccurrencesCount
     * @return int
     */
    public function getHistoricalNegativeOccurrencesCount()
    {
        return $this->container['historicalNegativeOccurrencesCount'];
    }

    /**
     * Sets historicalNegativeOccurrencesCount
     * @param int $historicalNegativeOccurrencesCount
     * @return $this
     */
    public function setHistoricalNegativeOccurrencesCount($historicalNegativeOccurrencesCount)
    {
        $this->container['historicalNegativeOccurrencesCount'] = $historicalNegativeOccurrencesCount;

        return $this;
    }

    /**
     * Gets revolvingTradeCount
     * @return int
     */
    public function getRevolvingTradeCount()
    {
        return $this->container['revolvingTradeCount'];
    }

    /**
     * Sets revolvingTradeCount
     * @param int $revolvingTradeCount
     * @return $this
     */
    public function setRevolvingTradeCount($revolvingTradeCount)
    {
        $this->container['revolvingTradeCount'] = $revolvingTradeCount;

        return $this;
    }

    /**
     * Gets installmentTradeCount
     * @return int
     */
    public function getInstallmentTradeCount()
    {
        return $this->container['installmentTradeCount'];
    }

    /**
     * Sets installmentTradeCount
     * @param int $installmentTradeCount
     * @return $this
     */
    public function setInstallmentTradeCount($installmentTradeCount)
    {
        $this->container['installmentTradeCount'] = $installmentTradeCount;

        return $this;
    }

    /**
     * Gets mortgageTradeCount
     * @return int
     */
    public function getMortgageTradeCount()
    {
        return $this->container['mortgageTradeCount'];
    }

    /**
     * Sets mortgageTradeCount
     * @param int $mortgageTradeCount
     * @return $this
     */
    public function setMortgageTradeCount($mortgageTradeCount)
    {
        $this->container['mortgageTradeCount'] = $mortgageTradeCount;

        return $this;
    }

    /**
     * Gets openTradeCount
     * @return int
     */
    public function getOpenTradeCount()
    {
        return $this->container['openTradeCount'];
    }

    /**
     * Sets openTradeCount
     * @param int $openTradeCount
     * @return $this
     */
    public function setOpenTradeCount($openTradeCount)
    {
        $this->container['openTradeCount'] = $openTradeCount;

        return $this;
    }

    /**
     * Gets unspecifiedTradeCount
     * @return int
     */
    public function getUnspecifiedTradeCount()
    {
        return $this->container['unspecifiedTradeCount'];
    }

    /**
     * Sets unspecifiedTradeCount
     * @param int $unspecifiedTradeCount
     * @return $this
     */
    public function setUnspecifiedTradeCount($unspecifiedTradeCount)
    {
        $this->container['unspecifiedTradeCount'] = $unspecifiedTradeCount;

        return $this;
    }

    /**
     * Gets totalInquiryCount
     * @return int
     */
    public function getTotalInquiryCount()
    {
        return $this->container['totalInquiryCount'];
    }

    /**
     * Sets totalInquiryCount
     * @param int $totalInquiryCount
     * @return $this
     */
    public function setTotalInquiryCount($totalInquiryCount)
    {
        $this->container['totalInquiryCount'] = $totalInquiryCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this));
    }
}


