<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FuturePay\SDK\CreditDecisioning\Model;

use \ArrayAccess;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category    Class
 * @package     FuturePay\SDK\CreditDecisioning
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'suppliedInformation' => '\FuturePay\SDK\CreditDecisioning\Model\SuppliedInformation',
        'creditInformation' => '\FuturePay\SDK\CreditDecisioning\Model\CreditInformation',
        'decision' => '\FuturePay\SDK\CreditDecisioning\Model\Decision'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'suppliedInformation' => 'supplied_information',
        'creditInformation' => 'credit_information',
        'decision' => 'decision'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'suppliedInformation' => 'setSuppliedInformation',
        'creditInformation' => 'setCreditInformation',
        'decision' => 'setDecision'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'suppliedInformation' => 'getSuppliedInformation',
        'creditInformation' => 'getCreditInformation',
        'decision' => 'getDecision'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['suppliedInformation'] = isset($data['suppliedInformation']) ? $data['suppliedInformation'] : null;
        $this->container['creditInformation'] = isset($data['creditInformation']) ? $data['creditInformation'] : null;
        $this->container['decision'] = isset($data['decision']) ? $data['decision'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets suppliedInformation
     * @return \FuturePay\SDK\CreditDecisioning\Model\SuppliedInformation
     */
    public function getSuppliedInformation()
    {
        return $this->container['suppliedInformation'];
    }

    /**
     * Sets suppliedInformation
     * @param \FuturePay\SDK\CreditDecisioning\Model\SuppliedInformation $suppliedInformation
     * @return $this
     */
    public function setSuppliedInformation($suppliedInformation)
    {
        $this->container['suppliedInformation'] = $suppliedInformation;

        return $this;
    }

    /**
     * Gets creditInformation
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditInformation
     */
    public function getCreditInformation()
    {
        return $this->container['creditInformation'];
    }

    /**
     * Sets creditInformation
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditInformation $creditInformation
     * @return $this
     */
    public function setCreditInformation($creditInformation)
    {
        $this->container['creditInformation'] = $creditInformation;

        return $this;
    }

    /**
     * Gets decision
     * @return \FuturePay\SDK\CreditDecisioning\Model\Decision
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     * @param \FuturePay\SDK\CreditDecisioning\Model\Decision $decision
     * @return $this
     */
    public function setDecision($decision)
    {
        $this->container['decision'] = $decision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this));
    }
}


