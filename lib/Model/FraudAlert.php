<?php
/**
 * FraudAlert
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FraudAlert Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FraudAlert implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'fraud_alert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'description' => 'string',
        'recovery' => 'string',
        'addonCode' => 'string',
        'acceptSignupInd' => 'string',
        'needMoreInfo' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'description' => 'description',
        'recovery' => 'recovery',
        'addonCode' => 'addon_code',
        'acceptSignupInd' => 'accept_signup_ind',
        'needMoreInfo' => 'need_more_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'description' => 'setDescription',
        'recovery' => 'setRecovery',
        'addonCode' => 'setAddonCode',
        'acceptSignupInd' => 'setAcceptSignupInd',
        'needMoreInfo' => 'setNeedMoreInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'description' => 'getDescription',
        'recovery' => 'getRecovery',
        'addonCode' => 'getAddonCode',
        'acceptSignupInd' => 'getAcceptSignupInd',
        'needMoreInfo' => 'getNeedMoreInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['recovery'] = isset($data['recovery']) ? $data['recovery'] : null;
        $this->container['addonCode'] = isset($data['addonCode']) ? $data['addonCode'] : null;
        $this->container['acceptSignupInd'] = isset($data['acceptSignupInd']) ? $data['acceptSignupInd'] : null;
        $this->container['needMoreInfo'] = isset($data['needMoreInfo']) ? $data['needMoreInfo'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets recovery
     * @return string
     */
    public function getRecovery()
    {
        return $this->container['recovery'];
    }

    /**
     * Sets recovery
     * @param string $recovery
     * @return $this
     */
    public function setRecovery($recovery)
    {
        $this->container['recovery'] = $recovery;

        return $this;
    }

    /**
     * Gets addonCode
     * @return string
     */
    public function getAddonCode()
    {
        return $this->container['addonCode'];
    }

    /**
     * Sets addonCode
     * @param string $addonCode
     * @return $this
     */
    public function setAddonCode($addonCode)
    {
        $this->container['addonCode'] = $addonCode;

        return $this;
    }

    /**
     * Gets acceptSignupInd
     * @return string
     */
    public function getAcceptSignupInd()
    {
        return $this->container['acceptSignupInd'];
    }

    /**
     * Sets acceptSignupInd
     * @param string $acceptSignupInd
     * @return $this
     */
    public function setAcceptSignupInd($acceptSignupInd)
    {
        $this->container['acceptSignupInd'] = $acceptSignupInd;

        return $this;
    }

    /**
     * Gets needMoreInfo
     * @return string
     */
    public function getNeedMoreInfo()
    {
        return $this->container['needMoreInfo'];
    }

    /**
     * Sets needMoreInfo
     * @param string $needMoreInfo
     * @return $this
     */
    public function setNeedMoreInfo($needMoreInfo)
    {
        $this->container['needMoreInfo'] = $needMoreInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


