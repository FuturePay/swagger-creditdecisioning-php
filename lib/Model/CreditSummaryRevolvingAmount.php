<?php
/**
 * CreditSummaryRevolvingAmount
 *
 * PHP version 5
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FuturePay\SDK\CreditDecisioning\Model;

use \ArrayAccess;

/**
 * CreditSummaryRevolvingAmount Class Doc Comment
 *
 * @category    Class
 * @package     FuturePay\SDK\CreditDecisioning
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreditSummaryRevolvingAmount implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'credit_summary_revolvingAmount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'percentAvailableCredit' => 'int',
        'highCredit' => 'int',
        'creditLimit' => 'int',
        'currentBalance' => 'int',
        'pastDue' => 'int',
        'monthlyPayment' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'percentAvailableCredit' => 'percentAvailableCredit',
        'highCredit' => 'highCredit',
        'creditLimit' => 'creditLimit',
        'currentBalance' => 'currentBalance',
        'pastDue' => 'pastDue',
        'monthlyPayment' => 'monthlyPayment'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'percentAvailableCredit' => 'setPercentAvailableCredit',
        'highCredit' => 'setHighCredit',
        'creditLimit' => 'setCreditLimit',
        'currentBalance' => 'setCurrentBalance',
        'pastDue' => 'setPastDue',
        'monthlyPayment' => 'setMonthlyPayment'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'percentAvailableCredit' => 'getPercentAvailableCredit',
        'highCredit' => 'getHighCredit',
        'creditLimit' => 'getCreditLimit',
        'currentBalance' => 'getCurrentBalance',
        'pastDue' => 'getPastDue',
        'monthlyPayment' => 'getMonthlyPayment'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['percentAvailableCredit'] = isset($data['percentAvailableCredit']) ? $data['percentAvailableCredit'] : null;
        $this->container['highCredit'] = isset($data['highCredit']) ? $data['highCredit'] : null;
        $this->container['creditLimit'] = isset($data['creditLimit']) ? $data['creditLimit'] : null;
        $this->container['currentBalance'] = isset($data['currentBalance']) ? $data['currentBalance'] : null;
        $this->container['pastDue'] = isset($data['pastDue']) ? $data['pastDue'] : null;
        $this->container['monthlyPayment'] = isset($data['monthlyPayment']) ? $data['monthlyPayment'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets percentAvailableCredit
     * @return int
     */
    public function getPercentAvailableCredit()
    {
        return $this->container['percentAvailableCredit'];
    }

    /**
     * Sets percentAvailableCredit
     * @param int $percentAvailableCredit
     * @return $this
     */
    public function setPercentAvailableCredit($percentAvailableCredit)
    {
        $this->container['percentAvailableCredit'] = $percentAvailableCredit;

        return $this;
    }

    /**
     * Gets highCredit
     * @return int
     */
    public function getHighCredit()
    {
        return $this->container['highCredit'];
    }

    /**
     * Sets highCredit
     * @param int $highCredit
     * @return $this
     */
    public function setHighCredit($highCredit)
    {
        $this->container['highCredit'] = $highCredit;

        return $this;
    }

    /**
     * Gets creditLimit
     * @return int
     */
    public function getCreditLimit()
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     * @param int $creditLimit
     * @return $this
     */
    public function setCreditLimit($creditLimit)
    {
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets currentBalance
     * @return int
     */
    public function getCurrentBalance()
    {
        return $this->container['currentBalance'];
    }

    /**
     * Sets currentBalance
     * @param int $currentBalance
     * @return $this
     */
    public function setCurrentBalance($currentBalance)
    {
        $this->container['currentBalance'] = $currentBalance;

        return $this;
    }

    /**
     * Gets pastDue
     * @return int
     */
    public function getPastDue()
    {
        return $this->container['pastDue'];
    }

    /**
     * Sets pastDue
     * @param int $pastDue
     * @return $this
     */
    public function setPastDue($pastDue)
    {
        $this->container['pastDue'] = $pastDue;

        return $this;
    }

    /**
     * Gets monthlyPayment
     * @return int
     */
    public function getMonthlyPayment()
    {
        return $this->container['monthlyPayment'];
    }

    /**
     * Sets monthlyPayment
     * @param int $monthlyPayment
     * @return $this
     */
    public function setMonthlyPayment($monthlyPayment)
    {
        $this->container['monthlyPayment'] = $monthlyPayment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this));
    }
}


