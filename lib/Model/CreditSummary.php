<?php
/**
 * CreditSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  FuturePay\SDK\CreditDecisioning
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FuturePay\SDK\CreditDecisioning\Model;

use \ArrayAccess;

/**
 * CreditSummary Class Doc Comment
 *
 * @category    Class
 * @package     FuturePay\SDK\CreditDecisioning
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreditSummary implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'credit_summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'revolvingAmount' => '\FuturePay\SDK\CreditDecisioning\Model\CreditSummaryRevolvingAmount',
        'installmentAmount' => '\FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount',
        'closedWithBalanceAmount' => '\FuturePay\SDK\CreditDecisioning\Model\CreditSummaryClosedWithBalanceAmount',
        'totalAmount' => '\FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount',
        'totalHistory' => '\FuturePay\SDK\CreditDecisioning\Model\CreditSummaryTotalHistory'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'revolvingAmount' => 'revolvingAmount',
        'installmentAmount' => 'installmentAmount',
        'closedWithBalanceAmount' => 'closedWithBalanceAmount',
        'totalAmount' => 'totalAmount',
        'totalHistory' => 'totalHistory'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'revolvingAmount' => 'setRevolvingAmount',
        'installmentAmount' => 'setInstallmentAmount',
        'closedWithBalanceAmount' => 'setClosedWithBalanceAmount',
        'totalAmount' => 'setTotalAmount',
        'totalHistory' => 'setTotalHistory'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'revolvingAmount' => 'getRevolvingAmount',
        'installmentAmount' => 'getInstallmentAmount',
        'closedWithBalanceAmount' => 'getClosedWithBalanceAmount',
        'totalAmount' => 'getTotalAmount',
        'totalHistory' => 'getTotalHistory'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revolvingAmount'] = isset($data['revolvingAmount']) ? $data['revolvingAmount'] : null;
        $this->container['installmentAmount'] = isset($data['installmentAmount']) ? $data['installmentAmount'] : null;
        $this->container['closedWithBalanceAmount'] = isset($data['closedWithBalanceAmount']) ? $data['closedWithBalanceAmount'] : null;
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
        $this->container['totalHistory'] = isset($data['totalHistory']) ? $data['totalHistory'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets revolvingAmount
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryRevolvingAmount
     */
    public function getRevolvingAmount()
    {
        return $this->container['revolvingAmount'];
    }

    /**
     * Sets revolvingAmount
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryRevolvingAmount $revolvingAmount
     * @return $this
     */
    public function setRevolvingAmount($revolvingAmount)
    {
        $this->container['revolvingAmount'] = $revolvingAmount;

        return $this;
    }

    /**
     * Gets installmentAmount
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount
     */
    public function getInstallmentAmount()
    {
        return $this->container['installmentAmount'];
    }

    /**
     * Sets installmentAmount
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount $installmentAmount
     * @return $this
     */
    public function setInstallmentAmount($installmentAmount)
    {
        $this->container['installmentAmount'] = $installmentAmount;

        return $this;
    }

    /**
     * Gets closedWithBalanceAmount
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryClosedWithBalanceAmount
     */
    public function getClosedWithBalanceAmount()
    {
        return $this->container['closedWithBalanceAmount'];
    }

    /**
     * Sets closedWithBalanceAmount
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryClosedWithBalanceAmount $closedWithBalanceAmount
     * @return $this
     */
    public function setClosedWithBalanceAmount($closedWithBalanceAmount)
    {
        $this->container['closedWithBalanceAmount'] = $closedWithBalanceAmount;

        return $this;
    }

    /**
     * Gets totalAmount
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryInstallmentAmount $totalAmount
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets totalHistory
     * @return \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryTotalHistory
     */
    public function getTotalHistory()
    {
        return $this->container['totalHistory'];
    }

    /**
     * Sets totalHistory
     * @param \FuturePay\SDK\CreditDecisioning\Model\CreditSummaryTotalHistory $totalHistory
     * @return $this
     */
    public function setTotalHistory($totalHistory)
    {
        $this->container['totalHistory'] = $totalHistory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\FuturePay\SDK\CreditDecisioning\ObjectSerializer::sanitizeForSerialization($this));
    }
}


