<?php
/**
 * CreditInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Credit Decision
 *
 * This is a microservice used to make a credit decision for a user based on input
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@futurepay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreditInformation Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreditInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'credit_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ofac_message' => 'string',
        'fico_score' => 'int',
        'vantage_score' => 'int',
        'debit_income_estimator_score' => 'int',
        'ssn' => 'string',
        'dob' => 'string',
        'fraud_alert' => '\Swagger\Client\Model\InlineResponse200CreditInformationFraudAlert',
        'deceased_date' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ofac_message' => 'ofac_message',
        'fico_score' => 'fico_score',
        'vantage_score' => 'vantage_score',
        'debit_income_estimator_score' => 'debit_income_estimator_score',
        'ssn' => 'ssn',
        'dob' => 'dob',
        'fraud_alert' => 'fraud_alert',
        'deceased_date' => 'deceased_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ofac_message' => 'setOfacMessage',
        'fico_score' => 'setFicoScore',
        'vantage_score' => 'setVantageScore',
        'debit_income_estimator_score' => 'setDebitIncomeEstimatorScore',
        'ssn' => 'setSsn',
        'dob' => 'setDob',
        'fraud_alert' => 'setFraudAlert',
        'deceased_date' => 'setDeceasedDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ofac_message' => 'getOfacMessage',
        'fico_score' => 'getFicoScore',
        'vantage_score' => 'getVantageScore',
        'debit_income_estimator_score' => 'getDebitIncomeEstimatorScore',
        'ssn' => 'getSsn',
        'dob' => 'getDob',
        'fraud_alert' => 'getFraudAlert',
        'deceased_date' => 'getDeceasedDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ofac_message'] = isset($data['ofac_message']) ? $data['ofac_message'] : null;
        $this->container['fico_score'] = isset($data['fico_score']) ? $data['fico_score'] : null;
        $this->container['vantage_score'] = isset($data['vantage_score']) ? $data['vantage_score'] : null;
        $this->container['debit_income_estimator_score'] = isset($data['debit_income_estimator_score']) ? $data['debit_income_estimator_score'] : null;
        $this->container['ssn'] = isset($data['ssn']) ? $data['ssn'] : null;
        $this->container['dob'] = isset($data['dob']) ? $data['dob'] : null;
        $this->container['fraud_alert'] = isset($data['fraud_alert']) ? $data['fraud_alert'] : null;
        $this->container['deceased_date'] = isset($data['deceased_date']) ? $data['deceased_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets ofac_message
     * @return string
     */
    public function getOfacMessage()
    {
        return $this->container['ofac_message'];
    }

    /**
     * Sets ofac_message
     * @param string $ofac_message
     * @return $this
     */
    public function setOfacMessage($ofac_message)
    {
        $this->container['ofac_message'] = $ofac_message;

        return $this;
    }

    /**
     * Gets fico_score
     * @return int
     */
    public function getFicoScore()
    {
        return $this->container['fico_score'];
    }

    /**
     * Sets fico_score
     * @param int $fico_score
     * @return $this
     */
    public function setFicoScore($fico_score)
    {
        $this->container['fico_score'] = $fico_score;

        return $this;
    }

    /**
     * Gets vantage_score
     * @return int
     */
    public function getVantageScore()
    {
        return $this->container['vantage_score'];
    }

    /**
     * Sets vantage_score
     * @param int $vantage_score
     * @return $this
     */
    public function setVantageScore($vantage_score)
    {
        $this->container['vantage_score'] = $vantage_score;

        return $this;
    }

    /**
     * Gets debit_income_estimator_score
     * @return int
     */
    public function getDebitIncomeEstimatorScore()
    {
        return $this->container['debit_income_estimator_score'];
    }

    /**
     * Sets debit_income_estimator_score
     * @param int $debit_income_estimator_score
     * @return $this
     */
    public function setDebitIncomeEstimatorScore($debit_income_estimator_score)
    {
        $this->container['debit_income_estimator_score'] = $debit_income_estimator_score;

        return $this;
    }

    /**
     * Gets ssn
     * @return string
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     * @param string $ssn
     * @return $this
     */
    public function setSsn($ssn)
    {
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets dob
     * @return string
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     * @param string $dob
     * @return $this
     */
    public function setDob($dob)
    {
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets fraud_alert
     * @return \Swagger\Client\Model\InlineResponse200CreditInformationFraudAlert
     */
    public function getFraudAlert()
    {
        return $this->container['fraud_alert'];
    }

    /**
     * Sets fraud_alert
     * @param \Swagger\Client\Model\InlineResponse200CreditInformationFraudAlert $fraud_alert
     * @return $this
     */
    public function setFraudAlert($fraud_alert)
    {
        $this->container['fraud_alert'] = $fraud_alert;

        return $this;
    }

    /**
     * Gets deceased_date
     * @return string
     */
    public function getDeceasedDate()
    {
        return $this->container['deceased_date'];
    }

    /**
     * Sets deceased_date
     * @param string $deceased_date
     * @return $this
     */
    public function setDeceasedDate($deceased_date)
    {
        $this->container['deceased_date'] = $deceased_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


